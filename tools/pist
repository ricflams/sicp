#!/bin/bash

# Function to install jq
install_jq() {
    echo "Installing jq..."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        sudo apt-get update && sudo apt-get install -y jq
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install jq
    else
        echo "Unsupported OS for jq installation. Please install jq manually."
        exit 1
    fi
}

# Function to install curl
install_curl() {
    echo "Installing curl..."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        sudo apt-get update && sudo apt-get install -y curl
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install curl
    else
        echo "Unsupported OS for curl installation. Please install curl manually."
        exit 1
    fi
}

# Check for jq and curl dependencies
if ! command -v jq &>/dev/null; then
    install_jq
fi

if ! command -v curl &>/dev/null; then
    install_curl
fi

# Constants for Gist API
GIST_API_URL="https://api.github.com/gists"
GIST_CONFIG_FILE="$HOME/.pist"

# Load config file if it exists
if [[ -f "$GIST_CONFIG_FILE" ]]; then
    source "$GIST_CONFIG_FILE"
fi

# Helper function to escape content for JSON
escape_json_content() {
    echo "$1" | jq -R . | tr -d '\n'
}

# Function to fetch the content of the current Gist
get_gist_content() {
    curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "$GIST_API_URL/$GIST_ID" | jq -r '.files | .[. | keys | .[0]] | .content'
}

# Function to create a new Gist
create_gist() {
    local content="$1"
    local title="$2"
    response=$(curl -s -X POST "$GIST_API_URL" \
        -H "Authorization: token $GITHUB_TOKEN" \
        -d '{
            "description": "Pist note - '"$title"'",
            "public": false,
            "files": {
                "pist.txt": {
                    "content": "'"$content"'"
                }
            }
        }')
    GIST_ID=$(echo "$response" | jq -r '.id')
    echo "Gist created with ID: $GIST_ID"
    echo "GIST_ID=$GIST_ID" >> "$GIST_CONFIG_FILE"
}

# Function to update an existing Gist
update_gist() {
    local content="$1"
    curl -s -X PATCH "$GIST_API_URL/$GIST_ID" \
        -H "Authorization: token $GITHUB_TOKEN" \
        -d '{
            "files": {
                "pist.txt": {
                    "content": "'"$content"'"
                }
            }
        }'
    echo "Gist updated."
}

# Function to append content to an existing Gist
append_gist() {
    local new_content="$1"
    local existing_content=$(get_gist_content)
    local updated_content="$existing_content\n\n$new_content"
    update_gist "$updated_content"
}

# Function to upload a file to the Gist
upload_file() {
    local file="$1"
    local content=$(cat "$file")
    update_gist "$content"
}

# Show help message
show_help() {
    cat << EOF
Usage: pist [OPTIONS] [TEXT] [FILE]
Options:
  -i             Init a new Gist note
  -a             Append to existing Gist
  -f FILE        Upload the content of a file to the Gist
  -h             Show this help message
EOF
}

# Main functionality simplified
case "$1" in
    -i)
        init_gist
        ;;
    -a)
        if [[ -z "$GIST_ID" ]]; then
            echo "Error: No existing Gist to append to. Run -i to initialize first."
            exit 1
        fi
        append_gist "$2"
        ;;
    -f)
        if [[ -z "$2" || ! -f "$2" ]]; then
            echo "Error: Please provide a valid file."
            exit 1
        fi
        upload_file "$2"
        ;;
    -h)
        show_help
        ;;
    *)
        if [[ -n "$1" ]]; then
            if [[ -z "$GIST_ID" ]]; then
                echo "Error: No existing Gist. Run -i to initialize first."
                exit 1
            fi
            update_gist "$1"
        else
            show_help
        fi
        ;;
esac
