#!/bin/bash

CONFIG_FILE="$HOME/.pb"

# Function to prompt for username and API key if not already saved
prompt_for_credentials() {
    echo -n "Enter Pastebin username: "
    read -r username
    echo -n "Enter Pastebin API key: "
    read -r api_key

    # Store the credentials in the config file
    echo "username=$username" > "$CONFIG_FILE"
    echo "api_key=$api_key" >> "$CONFIG_FILE"
}

# Function to create a new paste
create_paste() {
    # Prompt for username and API key if not already stored
    if [[ ! -f "$CONFIG_FILE" ]]; then
        prompt_for_credentials
    else
        source "$CONFIG_FILE"
    fi

    # Resolve the username and hostname dynamically
    paste_title="$USER@$(hostname)"

    # Hardcoded initial text for the first paste
    initial_text="Welcome to pb"

    # Create the paste using the Pastebin API
    response=$(curl -s -X POST "https://pastebin.com/api/api_post.php" \
        -d "api_dev_key=$api_key" \
        -d "api_user_name=$username" \
        -d "api_option=paste" \
        -d "api_paste_data=$initial_text" \
        -d "api_paste_name=$paste_title" \
        -d "api_paste_private=2")

    # Extract paste ID from the response
    paste_id=$(echo "$response" | grep -oP '(?<=\=)([a-zA-Z0-9]+)')

    # If paste ID is found, save it to the .pb config file
    if [[ ! -z "$paste_id" ]]; then
        echo "Paste created successfully. Paste ID: $paste_id"
        echo "paste_id=$paste_id" >> "$CONFIG_FILE"
        echo "Paste URL: https://pastebin.com/$paste_id"
    else
        echo "Error creating paste: $response"
    fi
}

# Function to update an existing paste
update_paste() {
    # Read new content from standard input
    new_content="$1"

    # Check if paste_id exists in the config file
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "Error: Paste ID not found. Please create a paste first using the -i option."
        exit 1
    fi

    # Read the paste_id from the config file
    source "$CONFIG_FILE"

    if [[ -z "$paste_id" ]]; then
        echo "Error: Paste ID not found. Please create a paste first using the -i option."
        exit 1
    fi

    # Resolve the username and hostname dynamically for update
    paste_title="$USER@$(hostname)"

    # Update the paste with the new content using the Pastebin API
    response=$(curl -s -X POST "https://pastebin.com/api/api_post.php" \
        -d "api_dev_key=$api_key" \
        -d "api_user_name=$username" \
        -d "api_option=edit" \
        -d "api_paste_key=$paste_id" \
        -d "api_paste_data=$new_content" \
        -d "api_paste_name=$paste_title" \
        -d "api_paste_private=2")

    # No URL output during update, only success message
    echo "Paste updated successfully."
}

# Function to append content to an existing paste
append_paste() {
    # Read the content to append from standard input
    new_content="$1"

    # Check if paste_id exists in the config file
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "Error: Paste ID not found. Please create a paste first using the -i option."
        exit 1
    fi

    # Read the paste_id from the config file
    source "$CONFIG_FILE"

    if [[ -z "$paste_id" ]]; then
        echo "Error: Paste ID not found. Please create a paste first using the -i option."
        exit 1
    fi

    # Resolve the username and hostname dynamically for update
    paste_title="$USER@$(hostname)"

    # Fetch the current content of the paste using the Pastebin API
    current_content=$(curl -s -X POST "https://pastebin.com/api/api_post.php" \
        -d "api_dev_key=$api_key" \
        -d "api_user_name=$username" \
        -d "api_option=show_paste" \
        -d "api_paste_key=$paste_id")

    # Append the new content with a separating empty line
    updated_content="$current_content\n\n$new_content"

    # Update the paste with the appended content
    response=$(curl -s -X POST "https://pastebin.com/api/api_post.php" \
        -d "api_dev_key=$api_key" \
        -d "api_user_name=$username" \
        -d "api_option=edit" \
        -d "api_paste_key=$paste_id" \
        -d "api_paste_data=$updated_content" \
        -d "api_paste_name=$paste_title" \
        -d "api_paste_private=2")

    echo "Paste updated successfully."
}

# Handle script arguments
case "$1" in
    -i)
        create_paste
        ;;
    -a)
        if [[ -z "$2" ]]; then
            echo "Error: Content required to append."
            exit 1
        fi
        append_paste "$2"
        ;;
    -h)
        echo "Usage: pb [-i] [-a content] [-h]"
        echo "  -i    Init a new pastebin note (create a new paste)"
        echo "  -a    Append new content to the existing paste"
        echo "  -h    Show this help message"
        echo "If no options are provided, update the paste with the provided text."
        ;;
    *)
        if [[ -z "$1" ]]; then
            echo "Error: No text or option provided. Use -h for help."
            exit 1
        fi
        update_paste "$1"
        ;;
esac
