#!/bin/bash

# Config file to store the post ID and edit token
CONFIG_FILE="$HOME/.fling"

# Function to ensure required dependencies are installed
install_dependencies_if_needed() {
    # Check if curl is installed
    if ! command -v curl &> /dev/null; then
        echo "curl is required but not installed. Installing now..."
        if [[ -f /etc/debian_version ]]; then
            sudo apt update && sudo apt install -y curl
        elif [[ -f /etc/redhat-release ]]; then
            sudo yum install -y curl
        elif [[ -f /etc/arch-release ]]; then
            sudo pacman -Sy curl
        else
            echo "Unsupported Linux distribution. Please install curl manually."
            exit 1
        fi
    fi

    # Check if jq is installed
    if ! command -v jq &> /dev/null; then
        echo "jq is required but not installed. Installing now..."
        if [[ -f /etc/debian_version ]]; then
            sudo apt update && sudo apt install -y jq
        elif [[ -f /etc/redhat-release ]]; then
            sudo yum install -y jq
        elif [[ -f /etc/arch-release ]]; then
            sudo pacman -Sy jq
        else
            echo "Unsupported Linux distribution. Please install jq manually."
            exit 1
        fi
    fi
}

# Common function to send a post request (create or update)
send_post_request() {
    TEXT="$1"
    TOKEN="$2"
    POST_ID="$3"

    # Get username and hostname for the title
    USERNAME=$(whoami)
    HOSTNAME=$(hostname)
    TIMESTAMP=$(date --utc +'%Y-%m-%dT%H:%M:%SZ')

    # Create JSON payload with username@hostname in the title
    JSON_PAYLOAD=$(jq -n \
        --arg body "$TEXT" \
        --arg title "$USERNAME@$HOSTNAME - $TIMESTAMP" \
        --arg token "$TOKEN" \
        '{token: $token, body: $body, title: $title}')

    # Choose whether it's create or update based on POST_ID
    if [[ -z "$POST_ID" ]]; then
        # Create a new post
        curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://write.as/api/posts > /dev/null
    else
        # Update an existing post
        curl -s -X POST \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD" \
            "https://write.as/api/posts/$POST_ID" > /dev/null
    fi
}

# Function to create a new post
create_post() {
    install_dependencies_if_needed  # Ensure dependencies are installed
    TEXT="$1"
    
    if [[ -z "$TEXT" ]]; then
        echo "Error: No content provided to publish!"
        exit 1
    fi

    # Send post request to create a new post
    RESPONSE=$(send_post_request "$TEXT" "" "")

    # Extract post ID and edit token from the 'data' field
    POST_ID=$(echo "$RESPONSE" | jq -r '.data.id')
    EDIT_TOKEN=$(echo "$RESPONSE" | jq -r '.data.token')

    if [[ "$POST_ID" != "null" ]]; then
        echo "$POST_ID $EDIT_TOKEN" > "$CONFIG_FILE"
        POST_URL="https://write.as/$POST_ID"
        echo "Post created: $POST_URL"
    else
        echo "Error creating post: $RESPONSE"
    fi
}

# Function to update an existing post
update_post() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "No existing post found. Use -i to create one first!"
        exit 1
    fi

    POST_ID=$(awk '{print $1}' "$CONFIG_FILE")
    EDIT_TOKEN=$(awk '{print $2}' "$CONFIG_FILE")

    if [[ -z "$POST_ID" || "$POST_ID" == "null" ]]; then
        echo "Error: No valid post found to update."
        exit 1
    fi

    TEXT="$1"
    
    # Send post request to update an existing post
    send_post_request "$TEXT" "$EDIT_TOKEN" "$POST_ID"

    echo "Post updated: https://write.as/$POST_ID"
}

# Ensure correct usage
if [[ ! -f "$CONFIG_FILE" && "$1" != "-i" ]]; then
    echo "No existing post found. Use -i to create one first!"
    exit 1
fi

# Handle options
case "$1" in
    -i)
        shift
        create_post "$1"
        ;;
    -f)
        shift
        [[ -f "$1" ]] || { echo "File not found"; exit 1; }
        update_post "$(cat "$1")"
        ;;
    *)
        update_post "$1"
        ;;
esac
